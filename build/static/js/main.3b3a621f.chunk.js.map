{"version":3,"sources":["img/logo.png","Nav.js","ScrollToTop.js","HeroCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","src","logo","alt","ScrollToTop","props","state","is_visible","scrollComponent","this","document","addEventListener","e","toggleVisibility","window","pageYOffset","setState","scrollTo","top","behavior","onClick","scrollToTop","Component","HeroCard","posts","loading","error","axios","get","then","res","data","map","obj","catch","err","alert","renderError","post","index","key","image_url","name","description","renderPosts","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,mLCG5B,SAASC,IACtB,OACE,6BACE,yBAAKC,UAAU,iCACb,6BACE,yBAAKC,IAAKC,IAAMF,UAAU,yBAAyBG,IAAI,W,6CCN5CC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAY,GAHG,E,iFAQjB,IAAIC,EAAkBC,KACtBC,SAASC,iBAAiB,UAAU,SAASC,GAC3CJ,EAAgBK,wB,yCAKdC,OAAOC,YAAc,IACvBN,KAAKO,SAAS,CACZT,YAAY,IAGdE,KAAKO,SAAS,CACZT,YAAY,M,oCAMhBO,OAAOG,SAAS,CACdC,IAAK,EACLC,SAAU,a,+BAIJ,IAAD,OACCZ,EAAeE,KAAKH,MAApBC,WACR,OACE,yBAAKP,UAAU,iBACZO,GACC,4BACEP,UAAU,kBACVoB,QAAS,kBAAM,EAAKC,gBAEpB,uBAAGrB,UAAU,kBAAb,sB,GA3C6BsB,a,iBCoE1BC,E,2MAlEbjB,MAAQ,CACNkB,MAAO,GACPC,SAAS,EACTC,MAAO,M,mFAGY,IAAD,OAClBC,IACGC,IAAI,SACJC,MAAK,SAAAC,GACJ,IAAMN,EAAQM,EAAIC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,KAElC,EAAKjB,SAAS,CACZQ,QACAC,SAAS,EACTC,MAAO,UAGVQ,OAAM,SAAAC,GACL,EAAKnB,SAAS,CACZS,SAAS,EACTC,MAAOS,S,iCAKbC,MAAM,6D,oCAGN,OAAI3B,KAAKH,MAAMoB,MACNjB,KAAK4B,cAGZ,yBAAKrC,UAAU,4BACZS,KAAKH,MAAMkB,MAAMQ,KAAI,SAACM,EAAMC,GAAP,OACpB,yBAAKvC,UAAU,2BAA2BwC,IAAKD,GAC7C,yBAAKvC,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBAAKC,IAAKqC,EAAKG,UAAWtC,IAAI,WAGlC,yBAAKH,UAAU,iBACb,uBAAGA,UAAU,yBAAyBsC,EAAKI,MAC3C,2BACE,0BAAM1C,UAAU,cACd,2BAAIsC,EAAKI,QAGb,uBAAG1C,UAAU,iBAAiBsC,EAAKK,wB,+BAWnD,OAAO,6BAAMlC,KAAKmC,mB,GA/DCtB,aCaRuB,MAVf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAACD,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc+C,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAAS0C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAR,GACLgC,QAAQhC,MAAMA,EAAMiC,c","file":"static/js/main.3b3a621f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d520d2cd.png\";","import React from \"react\";\nimport logo from \"./img/logo.png\";\n\nexport default function Nav() {\n  return (\n    <div>\n      <nav className=\"nav-wrapper grey darken-3 nav\">\n        <div>\n          <img src={logo} className=\"brand-logo center logo\" alt=\"img\" />\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class ScrollToTop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      is_visible: false\n    };\n  }\n\n  componentDidMount() {\n    var scrollComponent = this;\n    document.addEventListener(\"scroll\", function(e) {\n      scrollComponent.toggleVisibility();\n    });\n  }\n\n  toggleVisibility() {\n    if (window.pageYOffset > 300) {\n      this.setState({\n        is_visible: true\n      });\n    } else {\n      this.setState({\n        is_visible: false\n      });\n    }\n  }\n\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  render() {\n    const { is_visible } = this.state;\n    return (\n      <div className=\"scroll-to-top\">\n        {is_visible && (\n          <button\n            className=\"btnScrollToTop \"\n            onClick={() => this.scrollToTop()}\n          >\n            <i className=\"material-icons\">arrow_upward</i>\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass HeroCard extends Component {\n  state = {\n    posts: [],\n    loading: true,\n    error: null\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"/punk\")\n      .then(res => {\n        const posts = res.data.map(obj => obj);\n        //console.log(\"data: \", posts);\n        this.setState({\n          posts,\n          loading: false,\n          error: null\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loading: false,\n          error: err\n        });\n      });\n  }\n  ReadMore() {\n    alert(\"chillax dude, what is worth having is worth waiting for\");\n  }\n  renderPosts() {\n    if (this.state.error) {\n      return this.renderError();\n    }\n    return (\n      <div className=\"row columns is-multiline\">\n        {this.state.posts.map((post, index) => (\n          <div className=\"column is-one-third #fff\" key={index}>\n            <div className=\"card small\">\n              <div className=\"card-content\">\n                <div className=\"media\">\n                  <div className=\"media-left\">\n                    <figure className=\"image is-64x64\">\n                      <img src={post.image_url} alt=\"pics\" />\n                    </figure>\n                  </div>\n                  <div className=\"media-content\">\n                    <p className=\"title is-4 no-padding\">{post.name}</p>\n                    <p>\n                      <span className=\"title is-6\">\n                        <a>{post.name}</a>\n                      </span>\n                    </p>\n                    <p className=\"subtitle is-6\">{post.description}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n  render() {\n    return <div>{this.renderPosts()}</div>;\n  }\n}\n\nexport default HeroCard;\n","import React from \"react\";\nimport Nav from \"./Nav\";\nimport \"./App.css\";\nimport ScrollToTop from \"./ScrollToTop\";\nimport HeroCard from \"./HeroCard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <HeroCard />\n      <ScrollToTop />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}